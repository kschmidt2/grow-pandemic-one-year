function drawHighcharts(){Highcharts.chart("chart-container-pandemic-one-year-1",{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8"},plotOptions:{series:{lineWidth:1,marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:27,y:-10,margin:-5},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:-40,max:10,tickAmount:6},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valueSuffix:"%",valueDecimals:1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-6},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-2",{chart:{type:"bar",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:2},plotOptions:{series:{groupPadding:.1,stacking:"percent"}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,y:-10,reversed:!0},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valueSuffix:"%"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:20},legend:{align:"left",x:-8},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-3",{chart:{type:"scatter",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:3,endColumn:1},plotOptions:{scatter:{lineWidth:1},series:{marker:{radius:3},states:{hover:{enabled:!1}}}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},title:{text:"S&P 500"},max:4e3,min:0,gridLineWidth:1,tickLength:0,labels:{useHTML:!0,overflow:"allow",formatter:function(){return Highcharts.numberFormat(this.value,0,".",",")}}},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},max:15,min:3,tickAmount:5,title:{text:"Unemployment rate"}},credits:{enabled:!1},tooltip:{enabled:!1},annotations:[{labels:[{point:{xAxis:0,yAxis:0,x:1335.85,y:4.5},shape:"connector",text:"Sept. 2006",align:"right",y:-10,x:-10,padding:0},{point:{xAxis:0,yAxis:0,x:1036.19,y:10.1},shape:"connector",text:"Oct. 2009",align:"right",y:-10,x:-10,padding:0},{point:{xAxis:0,yAxis:0,x:2954.22,y:3.5},shape:"connector",text:"Feb. 2020",align:"left",x:50,padding:0},{point:{xAxis:0,yAxis:0,x:2912.43,y:14.7},shape:"connector",text:"April 2020",align:"right",y:20,x:-20,padding:0}]}],responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:20},legend:{align:"left",x:-8},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-4",{chart:{type:"bar",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:4},plotOptions:{series:{groupPadding:.1,stacking:"percent"}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,y:-10,reversed:!0},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valueSuffix:"%"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:20},legend:{align:"left",x:-8,itemDistance:10},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-5",{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:5,endColumn:3},plotOptions:{series:{lineWidth:1,marker:{symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,y:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:-5,max:15,tickAmount:5},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueSuffix:"%",valueDecimals:2,shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-5},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-6",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:6},plotOptions:{series:{groupPadding:.15,clip:!1}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,y:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:-100,max:50,tickAmount:7},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valueSuffix:"%",valueDecimals:1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-8,itemDistance:10},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-7",{chart:{type:"dumbbell",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:10,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:7},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueSuffix:"%",valueDecimals:1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},plotOptions:{series:{marker:{radius:2.5}}},legend:{align:"left",x:-8},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-8",{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:8},plotOptions:{series:{lineWidth:1,marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,y:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5,plotLines:[{value:Date.UTC(2020,4,15),label:{text:"First stimulus<br>payments start",rotation:0,y:18}},{value:Date.UTC(2021,1,4),label:{text:"Second stimulus<br>payments start",rotation:0,y:273,x:-10,align:"right"}}]},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:-40,max:30,tickAmount:8},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valueSuffix:"%",valueDecimals:1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-5},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-9",{chart:{type:"line",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:2,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:9},plotOptions:{series:{lineWidth:1,marker:{enabled:!1,symbol:"circle",fillColor:"#ffffff",states:{hover:{fillColor:"#ffffff"}}}}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},plotLines:[{value:Date.UTC(2020,3,1),label:{text:"Stimulus<br>payments",rotation:0,y:18,x:-10,align:"right"}},{value:Date.UTC(2020,12,1)}],tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueSuffix:"%"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-8},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-pandemic-one-year-10",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:-50,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1xE0sygBgEpdwWb1Lmovh0Q5ZtH9AV0iNs8bV1LmKlQ8",googleSpreadsheetWorksheet:10},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:-100,max:100,tickAmount:5},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueSuffix:" billion",valuePrefix:"$",valueDecimals:1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-8},tooltip:{enabled:!1}}}]}})}Highcharts.setOptions({lang:{thousandsSep:","}}),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZHJhd0hpZ2hjaGFydHMiLCJIaWdoY2hhcnRzIiwiY2hhcnQiLCJ0eXBlIiwic3R5bGVkTW9kZSIsInNwYWNpbmdCb3R0b20iLCJzcGFjaW5nUmlnaHQiLCJzcGFjaW5nTGVmdCIsInNwYWNpbmdUb3AiLCJ0aXRsZSIsInRleHQiLCJkYXRhIiwiZ29vZ2xlU3ByZWFkc2hlZXRLZXkiLCJwbG90T3B0aW9ucyIsInNlcmllcyIsImxpbmVXaWR0aCIsIm1hcmtlciIsImVuYWJsZWQiLCJzeW1ib2wiLCJmaWxsQ29sb3IiLCJzdGF0ZXMiLCJob3ZlciIsImxlZ2VuZCIsImFsaWduIiwic3ltYm9sUmFkaXVzIiwidmVydGljYWxBbGlnbiIsIngiLCJ5IiwibWFyZ2luIiwieEF4aXMiLCJsYWJlbHMiLCJzdHlsZSIsIndoaXRlU3BhY2UiLCJ0aWNrTGVuZ3RoIiwieUF4aXMiLCJ1c2VIVE1MIiwib3ZlcmZsb3ciLCJtaW4iLCJtYXgiLCJ0aWNrQW1vdW50IiwiY3JlZGl0cyIsInRvb2x0aXAiLCJzaGFkb3ciLCJwYWRkaW5nIiwic2hhcmVkIiwidmFsdWVTdWZmaXgiLCJ2YWx1ZURlY2ltYWxzIiwicmVzcG9uc2l2ZSIsInJ1bGVzIiwiY29uZGl0aW9uIiwibWF4V2lkdGgiLCJjaGFydE9wdGlvbnMiLCJnb29nbGVTcHJlYWRzaGVldFdvcmtzaGVldCIsImdyb3VwUGFkZGluZyIsInN0YWNraW5nIiwicmV2ZXJzZWQiLCJlbmRDb2x1bW4iLCJzY2F0dGVyIiwicmFkaXVzIiwiZ3JpZExpbmVXaWR0aCIsImZvcm1hdHRlciIsIm51bWJlckZvcm1hdCIsInRoaXMiLCJ2YWx1ZSIsImFubm90YXRpb25zIiwicG9pbnQiLCJzaGFwZSIsIml0ZW1EaXN0YW5jZSIsImNsaXAiLCJwbG90TGluZXMiLCJEYXRlIiwiVVRDIiwibGFiZWwiLCJyb3RhdGlvbiIsInZhbHVlUHJlZml4Iiwic2V0T3B0aW9ucyIsImxhbmciLCJ0aG91c2FuZHNT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dkMsWUFBQSxDQUNBQyxPQUFBLENBQ0F1QyxhQUFBLEtBb0JBL0IsT0FBQSxDQUNBTCxTQUFBLEdBRUFZLE1BQUEsQ0FDQUMsT0FBQSxDQUNBQyxNQUFBLENBQ0FDLFdBQUEsV0FPQUMsV0FBQSxHQUdBQyxNQUFBLENBQ0F6QixPQUFBLEVBQ0FxQixPQUFBLENBQ0FLLFNBQUEsRUFDQUMsU0FBQSxTQUtBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsV0FBQSxHQUdBQyxRQUFBLENBQ0F2QixTQUFBLEdBRUF3QixRQUFBLENBQ0FDLFFBQUEsRUFDQUMsUUFBQSxHQUNBRSxZQUFBLFdBQ0E2QixZQUFBLElBQ0E1QixjQUFBLEdBRUFDLFdBQUEsQ0FDQUMsTUFBQSxDQUFBLENBQ0FDLFVBQUEsQ0FDQUMsU0FBQSxLQUVBQyxhQUFBLENBQ0FqRCxNQUFBLENBQ0FJLGFBQUEsSUFFQWdCLE9BQUEsQ0FDQUMsTUFBQSxPQUNBRyxHQUFBLEdBRUFlLFFBQUEsQ0FDQXhCLFNBQUEsU0Fwa0NBaEIsV0FBQTBFLFdBQUEsQ0FDQUMsS0FBQSxDQUNBQyxhQUFBLE9BMGtDQSxhQUFBQyxTQUFBQyxZQUFBLGdCQUFBRCxTQUFBQyxXQUNBL0UsaUJBRUE4RSxTQUFBRSxpQkFBQSxtQkFBQWhGIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbkhpZ2hjaGFydHMuc2V0T3B0aW9ucyh7XG4gICAgbGFuZzoge1xuICAgICAgdGhvdXNhbmRzU2VwOiAnLCdcbiAgICB9XG59KTtcblxuXG5mdW5jdGlvbiBkcmF3SGlnaGNoYXJ0cygpIHtcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KFwiY2hhcnQtY29udGFpbmVyLXBhbmRlbWljLW9uZS15ZWFyLTFcIiwgeyAvLyBhZGQgdGhlIHByb3BlciBJRCBoZXJlXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICBzdHlsZWRNb2RlOiB0cnVlLFxuICAgICAgICAgICAgc3BhY2luZ0JvdHRvbTogMjUsXG4gICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwMCxcbiAgICAgICAgICAgIHNwYWNpbmdMZWZ0OiAwLFxuICAgICAgICAgICAgc3BhY2luZ1RvcDogMjBcbiAgICAgICAgfSwgXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0S2V5OiAnMXhFMHN5Z0JnRXBkd1diMUxtb3ZoMFE1WnRIOUFWMGlOczhiVjFMbUtsUTgnLFxuICAgICAgICB9LFxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIC8vIGNsaXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgc3ltYm9sUmFkaXVzOiAwLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICB4OiAyNyxcbiAgICAgICAgICAgIHk6IC0xMCxcbiAgICAgICAgICAgIG1hcmdpbjogLTVcbiAgICAgICAgICAgIC8vIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gZWRpdHMgeEF4aXMgdGlja3NcbiAgICAgICAgICAgICAgICAvLyBkYXRlVGltZUxhYmVsRm9ybWF0czoge1xuICAgICAgICAgICAgICAgIC8vICAgICB3ZWVrOiAnJWIuICVlJyxcbiAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpY2tMZW5ndGg6IDUsXG4gICAgICAgICAgICAvLyB0aWNrSW50ZXJ2YWw6IDI0ICogMzYwMCAqIDEwMDAgKiA3XG4gICAgICAgIH0sXG4gICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICB0aXRsZTogZmFsc2UsXG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICB1c2VIVE1MOiB0cnVlLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnYWxsb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCh0aGlzLnZhbHVlLDAsJy4nLCcsJyk7XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pbjogLTQwLFxuICAgICAgICAgICAgbWF4OiAxMCxcbiAgICAgICAgICAgIHRpY2tBbW91bnQ6IDYsXG4gICAgICAgICAgICAvLyBhZGRzIGNvbW1hcyB0byB0aG91c2FuZHNcbiAgICAgICAgfSxcbiAgICAgICAgY3JlZGl0czoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgc2hhZG93OiBmYWxzZSxcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgc2hhcmVkOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWVTdWZmaXg6ICclJyxcbiAgICAgICAgICAgIC8vIHZhbHVlUHJlZml4OiAnJyxcbiAgICAgICAgICAgIHZhbHVlRGVjaW1hbHM6IDEsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNpdmU6IHtcbiAgICAgICAgICAgIHJ1bGVzOiBbe1xuICAgICAgICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6IDUwMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoYXJ0T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgc3BhY2luZ1JpZ2h0OiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWduOiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgIHg6IC02LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KFwiY2hhcnQtY29udGFpbmVyLXBhbmRlbWljLW9uZS15ZWFyLTJcIiwgeyAvLyBhZGQgdGhlIHByb3BlciBJRCBoZXJlXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgICAgIHN0eWxlZE1vZGU6IHRydWUsXG4gICAgICAgICAgICBzcGFjaW5nQm90dG9tOiAyNSxcbiAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTAwLFxuICAgICAgICAgICAgc3BhY2luZ0xlZnQ6IDAsXG4gICAgICAgICAgICBzcGFjaW5nVG9wOiAyMFxuICAgICAgICB9LCBcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRLZXk6ICcxeEUwc3lnQmdFcGR3V2IxTG1vdmgwUTVadEg5QVYwaU5zOGJWMUxtS2xROCcsXG4gICAgICAgICAgICBnb29nbGVTcHJlYWRzaGVldFdvcmtzaGVldDogMlxuICAgICAgICB9LFxuICAgICAgICAvLyBmb3IgYmFyIGNoYXJ0cyBvbmx5XG4gICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICBzZXJpZXM6IHtcbiAgICAgICAgICAgICAgICBncm91cFBhZGRpbmc6IDAuMSxcbiAgICAgICAgICAgICAgICBzdGFja2luZzogJ3BlcmNlbnQnXG4gICAgICAgICAgICB9IFxuICAgICAgICB9LFxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICAvLyBwbG90T3B0aW9uczoge1xuICAgICAgICAvLyAgICAgc2VyaWVzOiB7XG4gICAgICAgIC8vICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAvLyAgICAgICAgIC8vIGNsaXA6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAvLyAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgLy8gICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgIC8vICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgc3ltYm9sUmFkaXVzOiAwLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICB4OiAxMCxcbiAgICAgICAgICAgIHk6IC0xMCxcbiAgICAgICAgICAgIHJldmVyc2VkOiB0cnVlXG4gICAgICAgICAgICAvLyBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIGVkaXRzIHhBeGlzIHRpY2tzXG4gICAgICAgICAgICAgICAgLy8gZGF0ZVRpbWVMYWJlbEZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgd2VlazogJyViLiAlZScsXG4gICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA1LFxuICAgICAgICAgICAgLy8gdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogN1xuICAgICAgICB9LFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgdGl0bGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2FsbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSGlnaGNoYXJ0cy5udW1iZXJGb3JtYXQodGhpcy52YWx1ZSwwLCcuJywnLCcpO1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBtaW46ICxcbiAgICAgICAgICAgIC8vIG1heDogLFxuICAgICAgICAgICAgLy8gdGlja0Ftb3VudDogLFxuICAgICAgICAgICAgLy8gYWRkcyBjb21tYXMgdG8gdGhvdXNhbmRzXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRpdHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIHNoYWRvdzogZmFsc2UsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlU3VmZml4OiAnJScsXG4gICAgICAgICAgICAvLyB2YWx1ZVByZWZpeDogJycsXG4gICAgICAgICAgICAvLyB2YWx1ZURlY2ltYWxzOiAyLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMjBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KFwiY2hhcnQtY29udGFpbmVyLXBhbmRlbWljLW9uZS15ZWFyLTNcIiwgeyAvLyBhZGQgdGhlIHByb3BlciBJRCBoZXJlXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnc2NhdHRlcicsXG4gICAgICAgICAgICBzdHlsZWRNb2RlOiB0cnVlLFxuICAgICAgICAgICAgc3BhY2luZ0JvdHRvbTogMjUsXG4gICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwMCxcbiAgICAgICAgICAgIHNwYWNpbmdMZWZ0OiAwLFxuICAgICAgICAgICAgc3BhY2luZ1RvcDogMjBcbiAgICAgICAgfSwgXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0S2V5OiAnMXhFMHN5Z0JnRXBkd1diMUxtb3ZoMFE1WnRIOUFWMGlOczhiVjFMbUtsUTgnLFxuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRXb3Jrc2hlZXQ6IDMsXG4gICAgICAgICAgICBlbmRDb2x1bW46IDFcbiAgICAgICAgfSxcbiAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNjYXR0ZXI6IHtcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDFcbiAgICAgICAgICAgIH0gLFxuICAgICAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogM1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gZWRpdHMgeEF4aXMgdGlja3NcbiAgICAgICAgICAgICAgICAvLyBkYXRlVGltZUxhYmVsRm9ybWF0czoge1xuICAgICAgICAgICAgICAgIC8vICAgICB3ZWVrOiAnJWIuICVlJyxcbiAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgdGV4dDogJ1MmUCA1MDAnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWF4OiA0MDAwLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgZ3JpZExpbmVXaWR0aDogMSxcbiAgICAgICAgICAgIHRpY2tMZW5ndGg6IDAsXG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICB1c2VIVE1MOiEwLCBvdmVyZmxvdzpcImFsbG93XCIsIGZvcm1hdHRlcjpmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhpZ2hjaGFydHMubnVtYmVyRm9ybWF0KHRoaXMudmFsdWUsIDAsIFwiLlwiLCBcIixcIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICB0aXRsZTogZmFsc2UsXG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICB1c2VIVE1MOiB0cnVlLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnYWxsb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCh0aGlzLnZhbHVlLDAsJy4nLCcsJyk7XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heDogMTUsXG4gICAgICAgICAgICBtaW46IDMsXG4gICAgICAgICAgICB0aWNrQW1vdW50OiA1LFxuICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiAnVW5lbXBsb3ltZW50IHJhdGUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gbWluOiAsXG4gICAgICAgICAgICAvLyBtYXg6ICxcbiAgICAgICAgICAgIC8vIHRpY2tBbW91bnQ6ICxcbiAgICAgICAgICAgIC8vIGFkZHMgY29tbWFzIHRvIHRob3VzYW5kc1xuICAgICAgICB9LFxuICAgICAgICBjcmVkaXRzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBhbm5vdGF0aW9uczogW3tcbiAgICAgICAgICAgIGxhYmVsczogW3tcbiAgICAgICAgICAgICAgICBwb2ludDoge1xuICAgICAgICAgICAgICAgICAgICB4QXhpczogMCxcbiAgICAgICAgICAgICAgICAgICAgeUF4aXM6IDAsXG4gICAgICAgICAgICAgICAgICAgIHg6IDEzMzUuODUsXG4gICAgICAgICAgICAgICAgICAgIHk6IDQuNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2hhcGU6ICdjb25uZWN0b3InLFxuICAgICAgICAgICAgICAgIHRleHQ6ICdTZXB0LiAyMDA2JyxcbiAgICAgICAgICAgICAgICBhbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgICAgICB5OiAtMTAsXG4gICAgICAgICAgICAgICAgeDogLTEwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgIHBvaW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHhBeGlzOiAwLFxuICAgICAgICAgICAgICAgICAgICB5QXhpczogMCxcbiAgICAgICAgICAgICAgICAgICAgeDogMTAzNi4xOSxcbiAgICAgICAgICAgICAgICAgICAgeTogMTAuMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNoYXBlOiAnY29ubmVjdG9yJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnT2N0LiAyMDA5JyxcbiAgICAgICAgICAgICAgICBhbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgICAgICB5OiAtMTAsXG4gICAgICAgICAgICAgICAgeDogLTEwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgIHBvaW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHhBeGlzOiAwLFxuICAgICAgICAgICAgICAgICAgICB5QXhpczogMCxcbiAgICAgICAgICAgICAgICAgICAgeDogMjk1NC4yMixcbiAgICAgICAgICAgICAgICAgICAgeTogMy41XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzaGFwZTogJ2Nvbm5lY3RvcicsXG4gICAgICAgICAgICAgICAgdGV4dDogJ0ZlYi4gMjAyMCcsXG4gICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICB4OiA1MCxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwXG4gICAgICAgICAgICB9LHtcbiAgICAgICAgICAgICAgICBwb2ludDoge1xuICAgICAgICAgICAgICAgICAgICB4QXhpczogMCxcbiAgICAgICAgICAgICAgICAgICAgeUF4aXM6IDAsXG4gICAgICAgICAgICAgICAgICAgIHg6IDI5MTIuNDMsXG4gICAgICAgICAgICAgICAgICAgIHk6IDE0LjdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNoYXBlOiAnY29ubmVjdG9yJyxcbiAgICAgICAgICAgICAgICB0ZXh0OiAnQXByaWwgMjAyMCcsXG4gICAgICAgICAgICAgICAgYWxpZ246ICdyaWdodCcsXG4gICAgICAgICAgICAgICAgeTogMjAsXG4gICAgICAgICAgICAgICAgeDogLTIwLFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1dLFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMjBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KFwiY2hhcnQtY29udGFpbmVyLXBhbmRlbWljLW9uZS15ZWFyLTRcIiwgeyAvLyBhZGQgdGhlIHByb3BlciBJRCBoZXJlXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgICAgIHN0eWxlZE1vZGU6IHRydWUsXG4gICAgICAgICAgICBzcGFjaW5nQm90dG9tOiAyNSxcbiAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTAwLFxuICAgICAgICAgICAgc3BhY2luZ0xlZnQ6IDAsXG4gICAgICAgICAgICBzcGFjaW5nVG9wOiAyMFxuICAgICAgICB9LCBcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRLZXk6ICcxeEUwc3lnQmdFcGR3V2IxTG1vdmgwUTVadEg5QVYwaU5zOGJWMUxtS2xROCcsXG4gICAgICAgICAgICBnb29nbGVTcHJlYWRzaGVldFdvcmtzaGVldDogNFxuICAgICAgICB9LFxuICAgICAgICAvLyBmb3IgYmFyIGNoYXJ0cyBvbmx5XG4gICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICBzZXJpZXM6IHtcbiAgICAgICAgICAgICAgICBncm91cFBhZGRpbmc6IDAuMSxcbiAgICAgICAgICAgICAgICBzdGFja2luZzogJ3BlcmNlbnQnXG4gICAgICAgICAgICB9IFxuICAgICAgICB9LFxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICAvLyBwbG90T3B0aW9uczoge1xuICAgICAgICAvLyAgICAgc2VyaWVzOiB7XG4gICAgICAgIC8vICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAvLyAgICAgICAgIC8vIGNsaXA6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAvLyAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgLy8gICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgIC8vICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgc3ltYm9sUmFkaXVzOiAwLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICB4OiAxMCxcbiAgICAgICAgICAgIHk6IC0xMCxcbiAgICAgICAgICAgIHJldmVyc2VkOiB0cnVlXG4gICAgICAgICAgICAvLyBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIGVkaXRzIHhBeGlzIHRpY2tzXG4gICAgICAgICAgICAgICAgLy8gZGF0ZVRpbWVMYWJlbEZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgd2VlazogJyViLiAlZScsXG4gICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA1LFxuICAgICAgICAgICAgLy8gdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogN1xuICAgICAgICB9LFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgdGl0bGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2FsbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSGlnaGNoYXJ0cy5udW1iZXJGb3JtYXQodGhpcy52YWx1ZSwwLCcuJywnLCcpO1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBtaW46ICxcbiAgICAgICAgICAgIC8vIG1heDogLFxuICAgICAgICAgICAgLy8gdGlja0Ftb3VudDogLFxuICAgICAgICAgICAgLy8gYWRkcyBjb21tYXMgdG8gdGhvdXNhbmRzXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRpdHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIHNoYWRvdzogZmFsc2UsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlU3VmZml4OiAnJScsXG4gICAgICAgICAgICAvLyB2YWx1ZVByZWZpeDogJycsXG4gICAgICAgICAgICAvLyB2YWx1ZURlY2ltYWxzOiAyLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMjBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtOCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbURpc3RhbmNlOiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KFwiY2hhcnQtY29udGFpbmVyLXBhbmRlbWljLW9uZS15ZWFyLTVcIiwgeyAvLyBhZGQgdGhlIHByb3BlciBJRCBoZXJlXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICBzdHlsZWRNb2RlOiB0cnVlLFxuICAgICAgICAgICAgc3BhY2luZ0JvdHRvbTogMjUsXG4gICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwMCxcbiAgICAgICAgICAgIHNwYWNpbmdMZWZ0OiAwLFxuICAgICAgICAgICAgc3BhY2luZ1RvcDogMjBcbiAgICAgICAgfSwgXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0S2V5OiAnMXhFMHN5Z0JnRXBkd1diMUxtb3ZoMFE1WnRIOUFWMGlOczhiVjFMbUtsUTgnLFxuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRXb3Jrc2hlZXQ6IDUsXG4gICAgICAgICAgICBlbmRDb2x1bW46IDNcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZm9yIGxpbmUgY2hhcnRzIG9ubHlcbiAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMSxcbiAgICAgICAgICAgICAgICAvLyBjbGlwOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbDogJ2NpcmNsZScsXG4gICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZidcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICBhbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgIHN5bWJvbFJhZGl1czogMCxcbiAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgeDogMTAsXG4gICAgICAgICAgICB5OiAtMTAsXG4gICAgICAgICAgICAvLyBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIGVkaXRzIHhBeGlzIHRpY2tzXG4gICAgICAgICAgICAgICAgLy8gZGF0ZVRpbWVMYWJlbEZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgd2VlazogJyViLiAlZScsXG4gICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA1LFxuICAgICAgICAgICAgLy8gdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogN1xuICAgICAgICB9LFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgdGl0bGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2FsbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSGlnaGNoYXJ0cy5udW1iZXJGb3JtYXQodGhpcy52YWx1ZSwwLCcuJywnLCcpO1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaW46IC01LFxuICAgICAgICAgICAgbWF4OiAxNSxcbiAgICAgICAgICAgIHRpY2tBbW91bnQ6IDUsXG4gICAgICAgICAgICAvLyBhZGRzIGNvbW1hcyB0byB0aG91c2FuZHNcbiAgICAgICAgfSxcbiAgICAgICAgY3JlZGl0czoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgc2hhZG93OiBmYWxzZSxcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICAgICAgdmFsdWVTdWZmaXg6ICclJyxcbiAgICAgICAgICAgIC8vIHZhbHVlUHJlZml4OiAnJCcsXG4gICAgICAgICAgICB2YWx1ZURlY2ltYWxzOiAyLFxuICAgICAgICAgICAgc2hhcmVkOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNpdmU6IHtcbiAgICAgICAgICAgIHJ1bGVzOiBbe1xuICAgICAgICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6IDUwMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoYXJ0T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgc3BhY2luZ1JpZ2h0OiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWduOiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgIHg6IC01XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV1cbiAgICAgICAgfVxuICAgIH0pLFxuICAgIEhpZ2hjaGFydHMuY2hhcnQoXCJjaGFydC1jb250YWluZXItcGFuZGVtaWMtb25lLXllYXItNlwiLCB7IC8vIGFkZCB0aGUgcHJvcGVyIElEIGhlcmVcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdjb2x1bW4nLFxuICAgICAgICAgICAgc3R5bGVkTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIHNwYWNpbmdCb3R0b206IDI1LFxuICAgICAgICAgICAgc3BhY2luZ1JpZ2h0OiAxMDAsXG4gICAgICAgICAgICBzcGFjaW5nTGVmdDogMCxcbiAgICAgICAgICAgIHNwYWNpbmdUb3A6IDIwXG4gICAgICAgIH0sIFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgdGV4dDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBnb29nbGVTcHJlYWRzaGVldEtleTogJzF4RTBzeWdCZ0VwZHdXYjFMbW92aDBRNVp0SDlBVjBpTnM4YlYxTG1LbFE4JyxcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0V29ya3NoZWV0OiA2XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGZvciBiYXIgY2hhcnRzIG9ubHlcbiAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgIGdyb3VwUGFkZGluZzogMC4xNSxcbiAgICAgICAgICAgICAgICBjbGlwOiBmYWxzZVxuICAgICAgICAgICAgfSBcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZm9yIGxpbmUgY2hhcnRzIG9ubHlcbiAgICAgICAgLy8gcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgLy8gICAgIHNlcmllczoge1xuICAgICAgICAvLyAgICAgICAgIGxpbmVXaWR0aDogMSxcbiAgICAgICAgLy8gICAgICAgICAvLyBjbGlwOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgICAgIHN5bWJvbDogJ2NpcmNsZScsXG4gICAgICAgIC8vICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICAvLyAgICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZidcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICBhbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgIHN5bWJvbFJhZGl1czogMCxcbiAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgeDogMTAsXG4gICAgICAgICAgICB5OiAtMTAsXG4gICAgICAgICAgICAvLyBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIGVkaXRzIHhBeGlzIHRpY2tzXG4gICAgICAgICAgICAgICAgLy8gZGF0ZVRpbWVMYWJlbEZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgd2VlazogJyViLiAlZScsXG4gICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA1LFxuICAgICAgICAgICAgLy8gdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogN1xuICAgICAgICB9LFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgdGl0bGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2FsbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSGlnaGNoYXJ0cy5udW1iZXJGb3JtYXQodGhpcy52YWx1ZSwwLCcuJywnLCcpO1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaW46IC0xMDAsXG4gICAgICAgICAgICBtYXg6IDUwLFxuICAgICAgICAgICAgdGlja0Ftb3VudDogNyxcbiAgICAgICAgICAgIC8vIGFkZHMgY29tbWFzIHRvIHRob3VzYW5kc1xuICAgICAgICB9LFxuICAgICAgICBjcmVkaXRzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBzaGFkb3c6IGZhbHNlLFxuICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICBzaGFyZWQ6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZVN1ZmZpeDogJyUnLFxuICAgICAgICAgICAgLy8gdmFsdWVQcmVmaXg6ICcnLFxuICAgICAgICAgICAgdmFsdWVEZWNpbWFsczogMSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2l2ZToge1xuICAgICAgICAgICAgcnVsZXM6IFt7XG4gICAgICAgICAgICBjb25kaXRpb246IHtcbiAgICAgICAgICAgICAgICBtYXhXaWR0aDogNTAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhcnRPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ246ICdsZWZ0JyxcbiAgICAgICAgICAgICAgICAgICAgeDogLTgsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1EaXN0YW5jZTogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9XVxuICAgICAgICB9XG4gICAgfSksXG4gICAgSGlnaGNoYXJ0cy5jaGFydChcImNoYXJ0LWNvbnRhaW5lci1wYW5kZW1pYy1vbmUteWVhci03XCIsIHsgLy8gYWRkIHRoZSBwcm9wZXIgSUQgaGVyZVxuICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgdHlwZTogJ2R1bWJiZWxsJyxcbiAgICAgICAgICAgIHN0eWxlZE1vZGU6IHRydWUsXG4gICAgICAgICAgICBzcGFjaW5nQm90dG9tOiAyNSxcbiAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTAwLFxuICAgICAgICAgICAgc3BhY2luZ0xlZnQ6IDEwLFxuICAgICAgICAgICAgc3BhY2luZ1RvcDogMjBcbiAgICAgICAgfSwgXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0S2V5OiAnMXhFMHN5Z0JnRXBkd1diMUxtb3ZoMFE1WnRIOUFWMGlOczhiVjFMbUtsUTgnLFxuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRXb3Jrc2hlZXQ6IDdcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZm9yIGJhciBjaGFydHMgb25seVxuICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXBQYWRkaW5nOiAwLjFcbiAgICAgICAgICAgIH0gXG4gICAgICAgIH0sXG4gICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgeEF4aXM6IHtcbiAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAvLyBlZGl0cyB4QXhpcyB0aWNrc1xuICAgICAgICAgICAgICAgIC8vIGRhdGVUaW1lTGFiZWxGb3JtYXRzOiB7XG4gICAgICAgICAgICAgICAgLy8gICAgIHdlZWs6ICclYi4gJWUnLFxuICAgICAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGlja0xlbmd0aDogNSxcbiAgICAgICAgICAgIC8vIHRpY2tJbnRlcnZhbDogMjQgKiAzNjAwICogMTAwMCAqIDdcbiAgICAgICAgfSxcbiAgICAgICAgeUF4aXM6IHtcbiAgICAgICAgICAgIHRpdGxlOiBmYWxzZSxcbiAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgIHVzZUhUTUw6IHRydWUsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdhbGxvdycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9ybWF0dGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIEhpZ2hjaGFydHMubnVtYmVyRm9ybWF0KHRoaXMudmFsdWUsMCwnLicsJywnKTtcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLy8gbWluOiAtODAsXG4gICAgICAgICAgICAvLyBtYXg6IDAsXG4gICAgICAgICAgICAvLyB0aWNrQW1vdW50OiA1LFxuICAgICAgICAgICAgLy8gYWRkcyBjb21tYXMgdG8gdGhvdXNhbmRzXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRpdHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIHNoYWRvdzogZmFsc2UsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIHZhbHVlU3VmZml4OiAnJScsXG4gICAgICAgICAgICAvLyB2YWx1ZVByZWZpeDogJycsXG4gICAgICAgICAgICB2YWx1ZURlY2ltYWxzOiAxLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyLjVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KFwiY2hhcnQtY29udGFpbmVyLXBhbmRlbWljLW9uZS15ZWFyLThcIiwgeyAvLyBhZGQgdGhlIHByb3BlciBJRCBoZXJlXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICBzdHlsZWRNb2RlOiB0cnVlLFxuICAgICAgICAgICAgc3BhY2luZ0JvdHRvbTogMjUsXG4gICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwMCxcbiAgICAgICAgICAgIHNwYWNpbmdMZWZ0OiAwLFxuICAgICAgICAgICAgc3BhY2luZ1RvcDogMjBcbiAgICAgICAgfSwgXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0S2V5OiAnMXhFMHN5Z0JnRXBkd1diMUxtb3ZoMFE1WnRIOUFWMGlOczhiVjFMbUtsUTgnLFxuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRXb3Jrc2hlZXQ6IDhcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZm9yIGJhciBjaGFydHMgb25seVxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIC8vIGNsaXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgc3ltYm9sUmFkaXVzOiAwLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICB4OiAxMCxcbiAgICAgICAgICAgIHk6IC0xMCxcbiAgICAgICAgICAgIC8vIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gZWRpdHMgeEF4aXMgdGlja3NcbiAgICAgICAgICAgICAgICAvLyBkYXRlVGltZUxhYmVsRm9ybWF0czoge1xuICAgICAgICAgICAgICAgIC8vICAgICB3ZWVrOiAnJWIuICVlJyxcbiAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpY2tMZW5ndGg6IDUsXG4gICAgICAgICAgICBwbG90TGluZXM6IFt7XG4gICAgICAgICAgICAgICAgdmFsdWU6IERhdGUuVVRDKDIwMjAsMDQsMTUpLFxuICAgICAgICAgICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6ICdGaXJzdCBzdGltdWx1czxicj5wYXltZW50cyBzdGFydCcsXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICAgICAgICAgICAgICB5OiAxOFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0se1xuICAgICAgICAgICAgICAgIHZhbHVlOiBEYXRlLlVUQygyMDIxLDAxLDA0KSxcbiAgICAgICAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnU2Vjb25kIHN0aW11bHVzPGJyPnBheW1lbnRzIHN0YXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDI3MyxcbiAgICAgICAgICAgICAgICAgICAgeDogLTEwLFxuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ3JpZ2h0J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgLy8gdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogN1xuICAgICAgICB9LFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgdGl0bGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2FsbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSGlnaGNoYXJ0cy5udW1iZXJGb3JtYXQodGhpcy52YWx1ZSwwLCcuJywnLCcpO1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaW46IC00MCxcbiAgICAgICAgICAgIG1heDogMzAsXG4gICAgICAgICAgICB0aWNrQW1vdW50OiA4LFxuICAgICAgICAgICAgLy8gYWRkcyBjb21tYXMgdG8gdGhvdXNhbmRzXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRpdHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIHNoYWRvdzogZmFsc2UsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlU3VmZml4OiAnJScsXG4gICAgICAgICAgICAvLyB2YWx1ZVByZWZpeDogJycsXG4gICAgICAgICAgICB2YWx1ZURlY2ltYWxzOiAxLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KFwiY2hhcnQtY29udGFpbmVyLXBhbmRlbWljLW9uZS15ZWFyLTlcIiwgeyAvLyBhZGQgdGhlIHByb3BlciBJRCBoZXJlXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICBzdHlsZWRNb2RlOiB0cnVlLFxuICAgICAgICAgICAgc3BhY2luZ0JvdHRvbTogMjUsXG4gICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwMCxcbiAgICAgICAgICAgIHNwYWNpbmdMZWZ0OiAyLFxuICAgICAgICAgICAgc3BhY2luZ1RvcDogMjBcbiAgICAgICAgfSwgXG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0S2V5OiAnMXhFMHN5Z0JnRXBkd1diMUxtb3ZoMFE1WnRIOUFWMGlOczhiVjFMbUtsUTgnLFxuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRXb3Jrc2hlZXQ6IDlcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZm9yIGJhciBjaGFydHMgb25seVxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICBwbG90T3B0aW9uczoge1xuICAgICAgICAgICAgc2VyaWVzOiB7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgICAgIC8vIGNsaXA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gZWRpdHMgeEF4aXMgdGlja3NcbiAgICAgICAgICAgICAgICAvLyBkYXRlVGltZUxhYmVsRm9ybWF0czoge1xuICAgICAgICAgICAgICAgIC8vICAgICB3ZWVrOiAnJWIuICVlJyxcbiAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RMaW5lczogW3tcbiAgICAgICAgICAgICAgICB2YWx1ZTogRGF0ZS5VVEMoMjAyMCwwMywwMSksXG4gICAgICAgICAgICAgICAgbGFiZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1N0aW11bHVzPGJyPnBheW1lbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDE4LFxuICAgICAgICAgICAgICAgICAgICB4OiAtMTAsXG4gICAgICAgICAgICAgICAgICAgIGFsaWduOiAncmlnaHQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSx7XG4gICAgICAgICAgICAgICAgdmFsdWU6IERhdGUuVVRDKDIwMjAsMTIsMDEpLFxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA1LFxuICAgICAgICAgICAgLy8gdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogN1xuICAgICAgICB9LFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgdGl0bGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2FsbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSGlnaGNoYXJ0cy5udW1iZXJGb3JtYXQodGhpcy52YWx1ZSwwLCcuJywnLCcpO1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBtaW46ICxcbiAgICAgICAgICAgIC8vIG1heDogLFxuICAgICAgICAgICAgLy8gdGlja0Ftb3VudDogLFxuICAgICAgICAgICAgLy8gYWRkcyBjb21tYXMgdG8gdGhvdXNhbmRzXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRpdHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIHNoYWRvdzogZmFsc2UsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIHZhbHVlU3VmZml4OiAnJScsXG4gICAgICAgICAgICAvLyB2YWx1ZVByZWZpeDogJycsXG4gICAgICAgICAgICAvLyB2YWx1ZURlY2ltYWxzOiAyLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KSxcbiAgICBIaWdoY2hhcnRzLmNoYXJ0KFwiY2hhcnQtY29udGFpbmVyLXBhbmRlbWljLW9uZS15ZWFyLTEwXCIsIHsgLy8gYWRkIHRoZSBwcm9wZXIgSUQgaGVyZVxuICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgdHlwZTogJ2NvbHVtbicsXG4gICAgICAgICAgICBzdHlsZWRNb2RlOiB0cnVlLFxuICAgICAgICAgICAgc3BhY2luZ0JvdHRvbTogMjUsXG4gICAgICAgICAgICBzcGFjaW5nUmlnaHQ6IDEwMCxcbiAgICAgICAgICAgIHNwYWNpbmdMZWZ0OiAtNTAsXG4gICAgICAgICAgICBzcGFjaW5nVG9wOiAyMFxuICAgICAgICB9LCBcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZ29vZ2xlU3ByZWFkc2hlZXRLZXk6ICcxeEUwc3lnQmdFcGR3V2IxTG1vdmgwUTVadEg5QVYwaU5zOGJWMUxtS2xROCcsXG4gICAgICAgICAgICBnb29nbGVTcHJlYWRzaGVldFdvcmtzaGVldDogMTAsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIGZvciBiYXIgY2hhcnRzIG9ubHlcbiAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgIGdyb3VwUGFkZGluZzogMC4xXG4gICAgICAgICAgICB9IFxuICAgICAgICB9LFxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICAvLyBwbG90T3B0aW9uczoge1xuICAgICAgICAvLyAgICAgc2VyaWVzOiB7XG4gICAgICAgIC8vICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAvLyAgICAgICAgIC8vIGNsaXA6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAvLyAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgLy8gICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgIC8vICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHhBeGlzOiB7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgLy8gZWRpdHMgeEF4aXMgdGlja3NcbiAgICAgICAgICAgICAgICAvLyBkYXRlVGltZUxhYmVsRm9ybWF0czoge1xuICAgICAgICAgICAgICAgIC8vICAgICB3ZWVrOiAnJWIuICVlJyxcbiAgICAgICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpY2tMZW5ndGg6IDUsXG4gICAgICAgICAgICAvLyB0aWNrSW50ZXJ2YWw6IDI0ICogMzYwMCAqIDEwMDAgKiA3XG4gICAgICAgIH0sXG4gICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICB0aXRsZTogZmFsc2UsXG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICB1c2VIVE1MOiB0cnVlLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnYWxsb3cnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCh0aGlzLnZhbHVlLDAsJy4nLCcsJyk7XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pbjogLTEwMCxcbiAgICAgICAgICAgIG1heDogMTAwLFxuICAgICAgICAgICAgdGlja0Ftb3VudDogNSxcbiAgICAgICAgICAgIC8vIGFkZHMgY29tbWFzIHRvIHRob3VzYW5kc1xuICAgICAgICB9LFxuICAgICAgICBjcmVkaXRzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBzaGFkb3c6IGZhbHNlLFxuICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICB2YWx1ZVN1ZmZpeDogJyBiaWxsaW9uJyxcbiAgICAgICAgICAgIHZhbHVlUHJlZml4OiAnJCcsXG4gICAgICAgICAgICB2YWx1ZURlY2ltYWxzOiAxLFxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnKSB7XG4gICAgZHJhd0hpZ2hjaGFydHMoKTtcbn0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZHJhd0hpZ2hjaGFydHMpO1xufSJdfQ==
